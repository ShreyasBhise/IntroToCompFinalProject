function [time,boolWithinASecond] = timeToCollision (particle1,particle2,typeOfCollision)
%finds time to collision and outputs a boolean if time is smaller than one
%and real.
if strcmp(typeOfCollision, "particleParticle")
    time = (-sqrt((2 * particle1.xPos * particle1.speed * cosd(particle1.angle)...
            - 2 * particle1.xPos * particle2.speed * cosd(particle2.angle) - 2 * particle2.xPos...
            * particle1.speed * cosd(particle1.angle) + 2 * particle2.xPos * particle2.speed...
            * cosd(particle2.angle) + 2 * particle1.yPos * particle1.speed * sind(particle1.angle)...
            - 2 * particle1.yPos * particle2.speed * sind(particle2.angle) - 2 * particle2.yPos...
            * particle1.speed * sind(particle1.angle) + 2 * particle2.yPos * particle2.speed...
            * sind(particle2.angle))^2 - 4 * (particle1.xPos^2 - 2 * particle1.xPos * particle2.xPos...
            + particle2.xPos^2 + particle1.yPos^2 - 2 * particle1.yPos * particle2.yPos...
            + particle2.yPos^2 - particle1.radius^2 - 2 * particle1.radius * particle2.radius...
            - particle2.radius^2) * (-2 * particle1.speed * particle2.speed * sind(particle1.angle)...
            * sind(particle2.angle) - 2 * particle1.speed * particle2.speed * cosd(particle1.angle)...
            * cosd(particle2.angle) + particle1.speed^2 * sind(particle1.angle)^2 + particle1.speed^2 ...
            * cosd(particle1.angle)^2 + particle2.speed^2 * sind(particle2.angle)^2 + particle2.speed^2 ...
            * cosd(particle2.angle)^2)) - 2 * particle1.xPos * particle1.speed * cosd(particle1.angle)...
            + 2 * particle1.xPos * particle2.speed * cosd(particle2.angle) + 2 * particle2.xPos...
            * particle1.speed * cosd(particle1.angle) - 2 * particle2.xPos * particle2.speed...
            * cosd(particle2.angle) - 2 * particle1.yPos * particle1.speed * sind(particle1.angle)...
            + 2 * particle1.yPos * particle2.speed * sind(particle2.angle) + 2 * particle2.yPos...
            * particle1.speed * sind(particle1.angle) - 2 * particle2.yPos * particle2.speed...
            * sind(particle2.angle))/(2 *(-2 * particle1.speed * particle2.speed * sind(particle1.angle)...
            * sind(particle2.angle) - 2 * particle1.speed * particle2.speed * cosd(particle1.angle)...
            * cosd(particle2.angle) + particle1.speed^2 * sind(particle1.angle)^2 + particle1.speed^2 ...
            * cosd(particle1.angle)^2 + particle2.speed^2 * sind(particle2.angle)^2 + particle2.speed^2 ...
            * cosd(particle2.angle)^2));

     if time >= 0 && time < 1 && isreal(time)
         boolWithinASecond = true;
     else
         boolWithinASecond = false;
     end
     
elseif strcmp(typeOfCollision,"particleWall")
    time = 1;
    
    %time to hit left wall. x = 0
    time1 = -particle1.xPos / (cos(particle1.angle) * particle1.speed);
    %time to hit right wall. x = 100
    time2 = (100 - particle1.xPos) / (cos(particle1.angle) * particle1.speed);
    %time to hit bottom wall. y = 0
    time3 = -particle1.yPos / (sin(particle1.angle) * particle1.speed);
    %time to hit top wall. y = 100
    time4 = (100 - particle1.yPos) / (sin(particle1.angle) * particle1.speed);
    
    if time1 >= 0 && time1 < 1
        time = time1;
    end
    if time2 >= 0 && time2 < 1 && time2 < time
        time = time2;
    end
    if time3 >= 0 && time3 < 1 && time3 < time
        time = time3;
    end
    if time4 >= 0 && time4 < 1 && time4 < time
        time = time4;
    end
    
    if time < 1
        boolWithinASecond = true;
    else
        boolWithinASecond = false;
    end
        
end